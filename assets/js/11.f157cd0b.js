(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{351:function(t,e,a){t.exports=a.p+"assets/img/1.cbc4c3ad.png"},352:function(t,e,a){t.exports=a.p+"assets/img/2.fd499db2.png"},490:function(t,e,a){"use strict";a.r(e);var r=a(42),i=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"一些命令行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一些命令行"}},[t._v("#")]),t._v(" 一些命令行")]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git飞行规则"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://blog.dangosky.com/2019/09/03/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",target:"_blank",rel:"noopener noreferrer"}},[t._v("My blog"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/FQPM_oSU5qU53y_SfdDG-A",target:"_blank",rel:"noopener noreferrer"}},[t._v("用动图解释 Git 工作原理这还是头一回"),r("OutboundLink")],1)])])]),t._v(" "),r("h2",{attrs:{id:"git-diff"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),r("p",[r("code",[t._v("git diff origin/master")]),t._v(" 用于和远端某个分支做 diff。当团队合作在一个远端分支开发时，通常 push 前需要将本地分支和远端分支 diff 一下，看看有没有冲突啥的。")]),t._v(" "),r("h2",{attrs:{id:"git-checkout"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("git checkout -b <branchName> <hashID>")]),t._v(" 恢复已经删除了的分支。")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git checkout --filename")]),t._v("  放弃某个文件的修改（未暂存，即还没 git add）。")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git checkout .")]),t._v(" 放弃所有未暂存文件的修改。")])]),t._v(" "),r("li",[r("p",[t._v("注："),r("code",[t._v("git add")]),t._v(" 使用 * 的话，比如使用 "),r("code",[t._v("git add test/*")]),t._v(" 暂存 test 文件夹下的所有文件，* 会默认忽略掉隐藏的文件夹比如 "),r("code",[t._v(".gitignore")]),t._v(" 等，如果也想暂存这些隐藏文件的话，需要使用 "),r("code",[t._v("git add test/.")]),t._v("。")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git checkout -b <本地新分支名> origin/远程分支名")]),t._v(" 把远端某个分支拉到本地并新建分支")])])]),t._v(" "),r("h2",{attrs:{id:"git-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git branch | grep -v 'master' | xargs git branch -D")]),t._v(" 删除除了 master 外的所有本地分支。")])]),t._v(" "),r("h2",{attrs:{id:"git-cherry-pick"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),r("p",[r("code",[t._v("git cherry-pick <commit id>")]),t._v("：将某一个 commit 选到当前的分支上。")]),t._v(" "),r("p",[r("code",[t._v("git cherry-pick A..B")]),t._v("：将 (A, B] 之间的 commit 都导入到当前分支。")]),t._v(" "),r("p",[r("code",[t._v("git cherry-pick A^..B")]),t._v("：将 [A, B] 之间的 commit 都导入到当前分支。")]),t._v(" "),r("h2",{attrs:{id:"git-clone-url-newname"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-url-newname"}},[t._v("#")]),t._v(" git clone url newName")]),t._v(" "),r("p",[t._v("克隆新项目并重命名")]),t._v(" "),r("h2",{attrs:{id:"git-help-command"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-help-command"}},[t._v("#")]),t._v(" git help command")]),t._v(" "),r("p",[t._v("获取该命令的帮助")]),t._v(" "),r("h2",{attrs:{id:"git-commit-amend"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-amend"}},[t._v("#")]),t._v(" git commit —amend")]),t._v(" "),r("p",[r("code",[t._v('git commit --amend -m "<commit message>"')]),t._v(" 将本次修改追加在上次的提交中，并修改 commit message。")]),t._v(" "),r("p",[r("code",[t._v("git commit --amend --no-edit")]),t._v(" 不修改 commit message 追加在上次的提交中。")]),t._v(" "),r("p",[r("code",[t._v('git commit --allow-empty -m "<commit message>"')]),t._v(" 空提交，可以用来重新触发 CI 构建。")]),t._v(" "),r("p",[r("code",[t._v('git commit --no-verify -m "<commit message>"')]),t._v(" 跳过 lint 校验直接提交。注意 "),r("code",[t._v("--no-verify")]),t._v(" 需要在 "),r("code",[t._v("-m")]),t._v(" 前面，否则会报错 "),r("code",[t._v("error: pathspec <commit message> did not match any file(s) known to git")]),t._v("。")]),t._v(" "),r("p",[r("code",[t._v("git update-ref -d HEAD")]),t._v(" reset 当前分支的所有提交，可以用来删除第一个提交。")]),t._v(" "),r("h2",{attrs:{id:"git-branch-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-branch-2"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),r("p",[t._v("将分支按最后提交 Commit 的日期进行排序。")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --sort"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("committerdate   "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ASC")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --sort"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("-committerdate  "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DESC，最新的分支会出现在列表的最上面")]),t._v("\n")])])]),r("p",[t._v("删除远程分支。")]),t._v(" "),r("p",[r("code",[t._v("git push origin --delete <远程分支名>")])]),t._v(" "),r("h2",{attrs:{id:"git-rebase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("git pull = git fetch + git merge")])]),t._v(" "),r("li",[r("p",[t._v("git pull --rebase = git fetch + git rebase")])]),t._v(" "),r("li",[r("p",[t._v("执行完 git pull --rebase 之后如果有合并冲突，使用以下三种方式处理这些冲突：")]),t._v(" "),r("ul",[r("li",[t._v("git rebase --abort 会放弃合并，回到 rebase 操作之前的状态，相当于撤销 rebase。")]),t._v(" "),r("li",[t._v("git rebase --skip 则会将引起冲突的 commits 丢弃掉（慎用！！）；")]),t._v(" "),r("li",[t._v("git rebase --continue 合并冲突，手动解决完冲突后 git add./，执行 git rebase --continue，不用 git commit 直接 push 即可。")])])])]),t._v(" "),r("h2",{attrs:{id:"git-push"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),r("h4",{attrs:{id:"git-push-force-with-lease"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-push-force-with-lease"}},[t._v("#")]),t._v(" git push --force-with-lease")]),t._v(" "),r("p",[t._v("当使用 --force-with-lease 进行提交的时候，Git 会将当前提交者本地远程分支内的提交和真正远程服务器上的提交进行比较。如果两者是相同的，那么就会允许这一次的 Force Push 操作；如果发现是不同的，那么很大概率就是远端有了他人的新提交，这时 Force Push 就不会成功了。此时，提交者应该通过 git fetch 的方式拿到最新的代码，确认是否需要进行更新改动，然后再次提交。需要注意的是，因为 Git 只是进行了本地远程分支和远程分支的比较，因此 git fetch 之后即使什么也不做，直接再一次进行 git push --force-with-lease 操作也是可以成功的。")]),t._v(" "),r("h2",{attrs:{id:"git-subtree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-subtree"}},[t._v("#")]),t._v(" git subtree")]),t._v(" "),r("p",[t._v("在一个项目中，如果只想把某一个文件夹比如打包后得到的 dist 下的所有文件都 push 到远程一个分支 origin/test，这时如果使用 "),r("code",[t._v("git push origin test")]),t._v(" 的话，其实是会把该项目的所有文件都推到 origin/test 的。此时需要使用 "),r("code",[t._v("git subtree")]),t._v(" 才可以只推送指定的 dist 文件夹。使用方式为 "),r("code",[t._v("git subtree push --prefix <文件名> origin <远端分支>")]),t._v("。")]),t._v(" "),r("p",[t._v("git subtree 可参考"),r("a",{attrs:{href:"https://einverne.github.io/post/2020/04/git-subtree-usage.html#%E5%B0%86%E6%9B%B4%E6%94%B9%E6%8E%A8%E9%80%81%E5%88%B0%E5%AD%90%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("git subtree 简单使用记录"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"git-log-pretty-oneline"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-log-pretty-oneline"}},[t._v("#")]),t._v(" git log --pretty=oneline")]),t._v(" "),r("blockquote",[r("p",[t._v("可以用来定位到是哪位同学改动到相关代码，快速对接。")])]),t._v(" "),r("p",[r("code",[t._v("git log <文件路径>")]),t._v(" 或者 "),r("code",[t._v("git log --pretty=oneline <文件路径>")]),t._v(" 查看该文件近期的修改记录。")]),t._v(" "),r("p",[r("code",[t._v("git show <hashID>")]),t._v(" 查看某次记录的修改内容。")]),t._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),r("ul",[r("li",[t._v("查看指定作者在当前分支上提交的代码行数。")])]),t._v(" "),r("p",[r("code",[t._v('git --no-pager log --author="作者名" --pretty=format:"%h" --no-patch | xargs -n1 -I{} git --no-pager diff --numstat {}^1 {} | awk \'{sum += $1} END {print sum}\'')])]),t._v(" "),r("h2",{attrs:{id:"常用命令速查表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用命令速查表"}},[t._v("#")]),t._v(" 常用命令速查表")]),t._v(" "),r("p",[r("img",{attrs:{src:a(351),alt:""}})]),t._v(" "),r("p",[r("img",{attrs:{src:a(352),alt:""}})])])}),[],!1,null,null,null);e.default=i.exports}}]);