(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{447:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),a("h2",{attrs:{id:"数据通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据通信"}},[t._v("#")]),t._v(" 数据通信：")]),t._v(" "),a("ul",[a("li",[t._v("父组件 -> 子组件：props")]),t._v(" "),a("li",[t._v("子组件 -> 父组件：$emit")])]),t._v(" "),a("h2",{attrs:{id:"六种数据通信方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六种数据通信方法"}},[t._v("#")]),t._v(" 六种数据通信方法")]),t._v(" "),a("h3",{attrs:{id:"使用-props-和-emit-接受和修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-props-和-emit-接受和修改"}},[t._v("#")]),t._v(" 使用 props 和 emit 接受和修改")]),t._v(" "),a("h3",{attrs:{id:"使用-vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-vuex"}},[t._v("#")]),t._v(" 使用 vuex")]),t._v(" "),a("h3",{attrs:{id:"先子传父-再父传子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先子传父-再父传子"}},[t._v("#")]),t._v(" 先子传父，再父传子")]),t._v(" "),a("h3",{attrs:{id:"parent、-children、-refs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parent、-children、-refs"}},[t._v("#")]),t._v(" $parent、$children、$refs")]),t._v(" "),a("p",[t._v("父子之间，使用 $parent / $children 或通过 this.$refs 直接操作子组件，但无法应用到兄弟组件之间。")]),t._v(" "),a("h3",{attrs:{id:"借助一个空的-vue-示例中转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#借助一个空的-vue-示例中转"}},[t._v("#")]),t._v(" 借助一个空的 vue 示例中转")]),t._v(" "),a("p",[t._v("定义一个公共文件来创建空的 vue 实例来充当媒介。在要通信的兄弟组件中都引入该 vue 实例，在其中一个组件中通过在新实例上触发 $emit 将事件和参数传递给另一个组件，另一个组件中在生命周期钩子中在新实例上使用 $on 来监听事件触发并接受参数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"attrs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attrs"}},[t._v("#")]),t._v(" $attrs")]),t._v(" "),a("p",[t._v('父组件向子组件传数据，子组件使用 $attrs 来接受。（可以简化父子孙组件传参，v-bind="$attrs"）')]),t._v(" "),a("ul",[a("li",[t._v("$attrs 与 $listeners 是两个对象。")]),t._v(" "),a("li",[t._v("$attrs 里存放的是父组件中绑定的非 Props 属性（在子组件中没有使用 prop 接受, class 和 style 除外）。")]),t._v(" "),a("li",[t._v("$listeners 里存放的是父组件中绑定的非原生事件（不含 .native 修饰器），如果父组件向子组件绑定了一个 v-model，则 $listeners 默认会有一个 input 事件，这样才能动态改变值。")]),t._v(" "),a("li",[t._v("inheritAttrs 属性：默认为 true, 继承所有的父组件属性（除 props 的特定绑定）作为普通的 HTML 特性应用在子组件的根元素上，如果你不希望组件的根元素继承特性设置 inheritAttrs: false, 但是 class 和 style 还是会继承。")])]),t._v(" "),a("h3",{attrs:{id:"provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" provide/inject")]),t._v(" "),a("ul",[a("li",[t._v("在父组件中使用 provide 来提供变量，在子孙组件中使用 inject 来注入变量。")]),t._v(" "),a("li",[t._v("provide: 应该是一个对象或返回一个对象的函数。允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效.")]),t._v(" "),a("li",[t._v("inject: 应该是一个字符串数组，或一个对象（key 是本地的绑定名）。可以给 inject 注入的值设置默认值。"),a("code",[t._v("inject: {foo: { default: 'foo'} }")])]),t._v(" "),a("li",[t._v("缺点：provide 和 inject 绑定并不是可响应的，父组件中修改了该变量的值，子孙组件中的该变量不会随着修改。\n"),a("ul",[a("li",[t._v("解决办法：使用 2.6 最新 API Vue.observable 优化响应式 provide。")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父组件：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("provide")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用一个 theme 来接受所有的变量，这样就不用每个变量都使用 observable 了")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("theme "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    color"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    theme"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("theme\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子组件:")]),t._v("\ninject"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  theme"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"prop-是单项数据绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prop-是单项数据绑定"}},[t._v("#")]),t._v(" prop 是单项数据绑定")]),t._v(" "),a("h3",{attrs:{id:"为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),a("ul",[a("li",[t._v("为了组件间更好的解耦，防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。在开发中可能有多个子组件依赖于父组件的某个数据，假如子组件可以修改父组件数据的话，一个子组件变化会引发所有依赖这个数据的子组件发生变化。")])]),t._v(" "),a("h3",{attrs:{id:"如何修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何修改"}},[t._v("#")]),t._v(" 如何修改")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果要在子组件中修改 props 的值，可以定义一个局部变量来接受 prop，或者使用一个计算属性来处理。但如果 prop 是引用数据类型，在子组件里面修改会改变父组件的值，因为它们操作的都是同一个地址。")])]),t._v(" "),a("li",[a("p",[t._v("Vue 1.x 中的 .sync 修饰符实现了对一个 prop 进行 “双向绑定”，当一个子组件改变了一个带 .sync 的 prop 的值时，这个变化也会同步到父组件中所绑定的值。但这也破坏了单向数据流，debug 复杂结构的应用时会带来很高的维护成本。")]),t._v(" "),a("ul",[a("li",[t._v("Vue 2.0 中移除 .sync。Vue 2.3.0 起重新引入了 .sync 修饰符。")]),t._v(" "),a("li",[t._v(".sync 的工作原理相当于是给要绑定的数据都添加了 v-on 事件监听器，也只是 $emit 的语法糖。不能将 v-bind.sync 用在一个字面量的对象上例如 "),a("code",[t._v('v-bind.sync="{title: doc.title}"')]),t._v("。")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);